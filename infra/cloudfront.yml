AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  DomainName:
    Description: The domain being deployed
    Type: String
    AllowedValues:
      - carolinemarcks.dev
      - staging.carolinemarcks.dev
  GatewayDomainNameImport:
    Description: The Name of the import for the domain of the gateway eg xyz.execute-api.us-east-1.amazonaws.com
    Type: String
  CertificateArnImport:
    Description: The name of the import for the ceritificate
    Type: String
    AllowedValues:
      - carolinemarcks-dev-CertificateArn
      - carolinemarcks-dev-StagingCertificateArn
Conditions:
  IsStaging: !Equals ['staging.carolinemarcks.dev', !Ref DomainName]
Resources:
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue carolinemarcks-dev-HostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # Universal CloudFront Hosted Zone ID

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access identity between CloudFront and S3 bucket

  CloudFrontS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${StaticBucket}/*'

  StaticBucket:
    Type: AWS::S3::Bucket

  LambdaEdgeAuthFunction:
    Type: AWS::Serverless::Function
    Condition: IsStaging
    Properties:
      CodeUri: ../packages/edge
      Handler: auth.handler
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs8.10
      Timeout: 5
      # More info at https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
      AutoPublishAlias: live

  LambdaEdgeFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: IsStaging
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowLambdaServiceToAssumeRole'
            Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref AWS::StackName
        Origins:
        - Id: ApiOrigin
          DomainName:
            Fn::ImportValue: !Ref GatewayDomainNameImport
          OriginPath: '/prod'
          CustomOriginConfig:
            HTTPPort: 443
            OriginProtocolPolicy: https-only
        - Id: StaticOrigin
          DomainName: !Sub '${StaticBucket}.s3.amazonaws.com'
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        Aliases:
        - !Ref DomainName
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [ 'GET', 'HEAD']
          TargetOriginId: StaticOrigin
          Compress: true
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations: !If
          - IsStaging
          -
            - EventType: viewer-request
              # <SAM-Function.Version> provides {FunctionARN}:{Version} which is exactly what Cloudfront expects
              # SAM Benefit here is upon function changes this function version will also be updated in Cloudfront
              LambdaFunctionARN: !Ref LambdaEdgeAuthFunction.Version
          - []
        CacheBehaviors:
        - PathPattern: '/api/*'
          TargetOriginId: ApiOrigin
          AllowedMethods:
            ['GET', 'HEAD', 'DELETE', 'OPTIONS', 'PATCH', 'POST', 'PUT']
          Compress: true
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Ref CertificateArnImport
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016

Outputs:
  StaticBucketName:
    Description: The name of the static bucket, which hosts the static content for the site
    Value: !Ref StaticBucket
    Export:
      Name: !Sub '${AWS::StackName}-StaticBucketName'